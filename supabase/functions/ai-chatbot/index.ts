import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('ü§ñ Sofia Chatbot iniciada');
    
    const { message, propertyId, conversationHistory = [] } = await req.json();

    if (!message || !propertyId) {
      throw new Error('Mensagem e ID do im√≥vel s√£o obrigat√≥rios');
    }

    console.log('üì© Mensagem recebida:', message);
    console.log('üè† Property ID:', propertyId);

    // Dados mock do im√≥vel (sempre funcionar√°)
    const mockProperty = {
      id: propertyId,
      title: "Kitnet Studio Centro",
      address: "Rua Augusta, 123 - Centro, S√£o Paulo - SP",
      rent: 1200,
      property_type: "Kitnet",
      bedrooms: 1,
      bathrooms: 1,
      area_sqm: 35,
      description: "Linda kitnet mobiliada no centro de S√£o Paulo. Perfeita para estudantes e profissionais. Pr√≥xima ao metr√¥ e universidades.",
      amenities: ["Ar condicionado", "Internet Wi-Fi", "Mobiliado", "Portaria 24h", "Pr√≥ximo ao metr√¥"]
    };

    // Create AI assistant prompt with property information
    const systemPrompt = `
Voc√™ √© Sofia, uma assistente virtual especializada em im√≥veis. Voc√™ est√° atendendo interessados no seguinte im√≥vel:

**INFORMA√á√ïES DO IM√ìVEL:**
- T√≠tulo: ${mockProperty.title}
- Endere√ßo: ${mockProperty.address}
- Pre√ßo: R$ ${mockProperty.rent}/m√™s
- Tipo: ${mockProperty.property_type}
- Quartos: ${mockProperty.bedrooms}
- Banheiros: ${mockProperty.bathrooms}
- √Årea: ${mockProperty.area_sqm}m¬≤
- Descri√ß√£o: ${mockProperty.description}
- Caracter√≠sticas: ${mockProperty.amenities?.join(', ') || 'N√£o especificadas'}

**SEU PAPEL:**
1. Seja amig√°vel, profissional e prestativa
2. Responda perguntas sobre o im√≥vel de forma detalhada
3. Colete informa√ß√µes do interessado: nome, telefone, email, renda mensal, urg√™ncia
4. Qualifique o lead verificando se a renda √© compat√≠vel (m√≠nimo 3x o valor do aluguel)
5. Ofere√ßa agendamento de visita para leads qualificados
6. Seja natural e humanizada na conversa

**DIRETRIZES:**
- Sempre se apresente como Sofia na primeira mensagem se ainda n√£o o fez
- Seja educada e use linguagem profissional mas amig√°vel
- Se perguntarem sobre outros im√≥veis, diga que voc√™ atende especificamente este
- Para agendamento, pergunte prefer√™ncia de hor√°rio (manh√£, tarde, fim de semana)
- Se o interessado n√£o tem renda suficiente, seja diplom√°tica e sugira que ele procure im√≥veis na sua faixa de pre√ßo

**IMPORTANTE:** Seja conversacional e natural. N√£o seja repetitiva ou rob√≥tica.

**FORMATO DE RESPOSTA:**
Responda de forma natural e conversacional. Se conseguir todas as informa√ß√µes necess√°rias do lead (nome, telefone, email, renda, urg√™ncia), termine sua resposta com:
[LEAD_QUALIFICADO: Nome, Telefone, Email, Renda, Urg√™ncia, Interesse_Visita]
`;

    const messages = [
      { role: 'system', content: systemPrompt },
      ...conversationHistory,
      { role: 'user', content: message }
    ];

    console.log('üß† Enviando para OpenAI...');

    // Call OpenAI API
    const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: messages,
        max_tokens: 500,
        temperature: 0.7,
      }),
    });

    if (!openAIResponse.ok) {
      const errorData = await openAIResponse.text();
      console.error('‚ùå Erro OpenAI:', errorData);
      throw new Error(`Erro na API do OpenAI: ${openAIResponse.status}`);
    }

    const openAIData = await openAIResponse.json();
    const aiResponse = openAIData.choices[0].message.content;

    console.log('‚úÖ Resposta da IA:', aiResponse);

    // Check if lead is qualified
    const leadMatch = aiResponse.match(/\[LEAD_QUALIFICADO:(.*?)\]/);
    let leadQualified = false;
    
    if (leadMatch) {
      leadQualified = true;
      console.log('üéØ Lead qualificado detectado!');
    }

    // Remove the lead qualification tag from response
    const cleanResponse = aiResponse.replace(/\[LEAD_QUALIFICADO:.*?\]/g, '').trim();

    console.log('üì§ Enviando resposta limpa');

    return new Response(
      JSON.stringify({ 
        response: cleanResponse,
        leadQualified: leadQualified
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('üí• Erro no chatbot:', error);
    return new Response(
      JSON.stringify({ 
        error: 'Erro interno do servidor',
        response: 'Desculpe, estou com dificuldades t√©cnicas no momento. Que tal tentar entrar em contato diretamente pelo WhatsApp? üòä'
      }),
      {
        status: 200, // Retornando status 200 para evitar erro no frontend
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});